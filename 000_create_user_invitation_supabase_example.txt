DROP FUNCTION IF EXISTS public.create_user_invitation(
  user_email TEXT,
  user_name  TEXT,
  user_role  TEXT
);




-- Enable pgcrypto for gen_random_uuid if not already
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

CREATE TABLE IF NOT EXISTS public.user_invitations (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    email text NOT NULL UNIQUE,
    name text,
    role text NOT NULL DEFAULT 'forecaster',
    invited_by uuid REFERENCES auth.users(id),
    created_at timestamptz NOT NULL DEFAULT now(),
    expires_at timestamptz NOT NULL DEFAULT now() + interval '7 days',
    used_at timestamptz
);

CREATE OR REPLACE FUNCTION public.create_user_invitation(
    user_email text,
    user_name text DEFAULT '',
    user_role text DEFAULT 'forecaster'
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    rec user_invitations;
BEGIN
    INSERT INTO public.user_invitations(email, name, role, invited_by)
    VALUES (user_email, user_name, user_role, auth.uid())
    ON CONFLICT (email) DO UPDATE
       SET name = EXCLUDED.name,
           role = EXCLUDED.role,
           invited_by = auth.uid(),
           created_at = now(),
           expires_at = now() + interval '7 days'
    RETURNING * INTO rec;

    RETURN to_jsonb(rec);
END;
$$;
